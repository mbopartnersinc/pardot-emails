///
/// - - - - - - - - - - - - - - - - - - - - - - - - -
///  GRID
/// - - - - - - - - - - - - - - - - - - - - - - - - -
///



///
///  CORE
/// - - - - - - - - - - - - - - - - - - - - - - - - -
///
    table {
        &.body {
            width: 100%;
        }

        &.container {
            background: $container-background;
            margin: 0 auto;
            Margin: 0 auto;
            text-align: inherit;
            width: $global-width;
        }

        &.row {
            padding: 0;
            position: relative;
            width: 100%;
        }

        &.spacer {
            width: 100%;
            td {
                mso-line-height-rule: exactly;
            }
        }
    }

    table.container table.row {
        display: table;
    }

    td.columns,
    td.column,
    th.columns,
    th.column {
        margin: 0 auto;
        Margin: 0 auto;
        padding-bottom: $column-padding-bottom;
        padding-left: $global-gutter;


        /** PREVENTS NESTED COLUMNS FROM DOUBLE THE PADDING **/
        .column,
        .columns {
            padding-left: 0 !important;
            padding-right: 0 !important;

            center {
                min-width: none !important;
            }
        }
    }

    td.columns.last,
    td.column.last,
    th.columns.last,
    th.column.last {
        padding-right: $global-gutter;
    }

    /** MAKES SURE NESTED TABLES ARE 100% WIDTH **/
    td.columns,
    td.column,
    th.columns,
    th.column {
        table:not(.button) {
            width: 100%;
        }
    }


///
///  BUILDING THE GRID COLUMNS
/// - - - - - - - - - - - - - - - - - - - - - - - - -
///
    @for $i from 1 through $grid-column-count {
        td.large-#{$i},
        th.large-#{$i} {
            padding-left: ($spacer / 2);
            padding-right: ($spacer / 2);
            width: -zf-grid-calc-px($i, $grid-column-count, $global-width);
        }

        td.large-#{$i}.first,
        th.large-#{$i}.first {
            padding-left: $global-gutter;
        }

        td.large-#{$i}.last,
        th.large-#{$i}.last {
            padding-right: $global-gutter;
        }

        /** COLLAPSED LOGIC **/
        .collapse {
            > tbody > tr > td.large-#{$i},
            > tbody > tr > th.large-#{$i} {
                padding-left: 0;
                padding-right: 0;
                width: -zf-grid-calc-px($i, $grid-column-count, $global-width) + $global-gutter;
            }

            /** GOTTA GIVE IT THAT EXTRA LOVE FOR THE FIRST AND LAST COLUMNS **/
            td.large-#{$i}.first,
            th.large-#{$i}.first,
            td.large-#{$i}.last,
            th.large-#{$i}.last {
                width: -zf-grid-calc-px($i, $grid-column-count, $global-width) + ($global-gutter * 1.5);
            }
        }

        td.large-#{$i} center,
        th.large-#{$i} center {
            min-width: -zf-grid-calc-px($i, $grid-column-count, $global-width) - ($global-gutter * 2);
        }

        .body .columns td.large-#{$i},
        .body .column td.large-#{$i},
        .body .columns th.large-#{$i},
        .body .column th.large-#{$i} {
            width: -zf-grid-calc-pct($i, $grid-column-count);
        }
    }

    @for $i from 1 through ($grid-column-count - 1) {
        td.large-offset-#{$i},
        td.large-offset-#{$i}.first,
        td.large-offset-#{$i}.last,
        th.large-offset-#{$i},
        th.large-offset-#{$i}.first,
        th.large-offset-#{$i}.last {
            /** 1.5 TAKES IN EFFECT A WHOLE EMPTY CELL **/
            padding-left: -zf-grid-calc-px($i, $grid-column-count, $global-width) + $global-gutter * 2;
        }
    }


///
///  UTILITIES
/// - - - - - - - - - - - - - - - - - - - - - - - - -
///
    td.expander,
    th.expander {
        padding: 0 !important;
        visibility: hidden;
        width: 0;
    }

    /** ADDS RADIUS TO CONTAINER **/
    table.container.radius {
        @include border-radius($container-radius);
        border-collapse: separate;
    }

